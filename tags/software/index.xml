<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>software on All opinions are a sample size of one</title>
    <link>http://www.example.com/tags/software/</link>
    <description>Recent content in software on All opinions are a sample size of one</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 31 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.example.com/tags/software/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>NetworkX meets Altair</title>
      <link>http://www.example.com/software/nx_altair/</link>
      <pubDate>Fri, 31 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.example.com/software/nx_altair/</guid>
      <description>NxAltair is a small library I created last year to draw NetworkX graphs in Altair. Altair is a declarative Python API for creating interactive visualizations powered by Vega. NetworkX is a broadly used library for analyzing network data.
NetworkX comes with a simple but powerful drawing API out-of-the-box. It&amp;rsquo;s built on Matplotlib and allows you to customize the drawing of nodes, edges, and labels separately. One major downside of using Matplotlib here is that the figure is static.</description>
    </item>
    
    <item>
      <title>Writing your own flavor of Pandas</title>
      <link>http://www.example.com/software/pandas-flavor/</link>
      <pubDate>Sun, 14 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://www.example.com/software/pandas-flavor/</guid>
      <description>Pandas is Python&amp;rsquo;s DataFrame library. There are many reasons why should be using DataFrame&amp;rsquo;s in your data science workflow, but I&amp;rsquo;ll have to leave that for another post. Here, I&amp;rsquo;ll show you how to tailor Pandas to your business, research, or personal workflow using Pandas&amp;rsquo; extension API.
In versions 0.24.x, Pandas introduced a new API for extending Pandas. This API handled the boilerplate code for registering custom accessors onto Pandas objects.</description>
    </item>
    
  </channel>
</rss>